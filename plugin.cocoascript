const sketch = context.api()

function createTempFolder() {
  var guid = [[NSProcessInfo processInfo] globallyUniqueString]
  var path = "/tmp/com.bomberstudios.sketch-commands/" + guid
  [[NSFileManager defaultManager] createDirectoryAtPath:path withIntermediateDirectories:true attributes:nil error:nil]
  return path
}

const tempFolder = createTempFolder()

function exportSlice(layer, format, info) {
  const ancestry = MSImmutableLayerAncestry.ancestryWithMSLayer_(layer.sketchObject)
  const rect = MSSliceTrimming.trimmedRectForLayerAncestry_(ancestry)
  if (layer.sketchObject.isMasked()) {
    info.frame.x = Number(rect.origin.x)
    info.frame.y = Number(rect.origin.y)
    info.frame.width = Number(rect.size.width)
    info.frame.height = Number(rect.size.height)
  }

  const slice = MSExportRequest.new()
  slice.rect = rect
  slice.scale = 1
  slice.includeArtboardBackground = true
  slice.configureForLayer(ancestry)
  const filename = tempFolder + '/slice.' + format
  context.document.saveArtboardOrSlice_toFile_(slice, filename)
  if (format === 'svg') {
    return String(NSString.stringWithContentsOfFile(filename))
  } else {
    const data = NSData.dataWithContentsOfFile(filename);
    const base64 = [data base64EncodedStringWithOptions:0];
    return String(base64)
  }
}

/*
log(sketch.api_version)
log(sketch.version)
log(sketch.build)
log(sketch.full_version)
var documentName = context.document.displayName()
log('The current document is named: ' + documentName)
*/

const document = sketch.selectedDocument
const selectedLayers = document.selectedLayers

const data = []

function cssToObject(arr) {
  return arr.reduce((obj, str) => {
    if (str.startsWith('/*')) return obj
    const parts = str.split(':')
    if (parts.length > 1) {
      let value = parts.slice(1).join(':').trim()
      if (value.endsWith(';')) value = value.substring(0, value.length - 1)
      obj[parts[0].trim()] = value
    }
    return obj
  }, {})
}

function appendLayerInformation(arr, layer) {
  if (!layer.frame) return
  // see https://github.com/abynim/Sketch-Headers/blob/master/Headers/MSLayer.h
  const sketchObject = layer.sketchObject
  const frame = layer.frame
  const info = {
    name: String(layer.name),
    frame: { x: frame.x, y: frame.y, width: frame.width, height: frame.height },
    css: cssToObject(sketchObject.CSSAttributes()),
    layout: {
      hasFixedHeight: !!sketchObject.hasFixedHeight(),
      hasFixedWidth: !!sketchObject.hasFixedWidth(),
      hasFixedBottom: !!sketchObject.hasFixedBottom(),
      hasFixedTop: !!sketchObject.hasFixedTop(),
      hasFixedRight: !!sketchObject.hasFixedRight(),
      hasFixedLeft: !!sketchObject.hasFixedLeft()
    },
    children: []
  }
  const allShapes = (layer) => {
    if (layer.isShape) return true
    if (layer.isGroup) {
      let all = true
      layer.iterate((subLayer, i) => {
        all = all && allShapes(subLayer)
      })
      return all
    }
    return false
  }
  if (layer.isGroup && allShapes(layer)) {
    info.svg = exportSlice(layer, 'svg', info)
  } else if (layer.isGroup) {
    layer.iterate((layer, i) => {
      appendLayerInformation(info.children, layer)
    })
  } else if (layer.isText) {
    info.text = String(layer.text)
    info.textAlign = layer.alignment
  } else if (layer.isShape && !sketchObject.isPartOfClippingMask()) {
    info.svg = exportSlice(layer, 'svg', info)
  } else if (layer.isImage) {
    info.image = exportSlice(layer, 'png', info)
  }
  arr.push(info)
}

selectedLayers.iterate((layer, i) => {
  appendLayerInformation(data, layer)
})


var pasteBoard = [NSPasteboard generalPasteboard]
[pasteBoard declareTypes:[NSArray arrayWithObject:NSPasteboardTypeString] owner:nil]
[pasteBoard setString:JSON.stringify(data, null, 2) forType:NSPasteboardTypeString]

// TODO: https://developer.apple.com/documentation/appkit/nsworkspace/1535886-open
